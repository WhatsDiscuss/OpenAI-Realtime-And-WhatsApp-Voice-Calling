"""
WhatsApp Business API client for making calls to WhatsApp endpoints.
Handles call answer requests and other WhatsApp API operations.
"""
import asyncio
import json
import logging
from typing import Dict, Any, Optional
from urllib.request import Request, urlopen
from urllib.error import HTTPError, URLError

from .config import config
from .utils import log_request_info


class WhatsAppClient:
    """Client for interacting with WhatsApp Business API."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.base_url = config.WHATSAPP_API_BASE_URL
        self.token = config.WHATSAPP_TOKEN
        
    def _make_request(self, method: str, url: str, data: Optional[Dict[str, Any]] = None, 
                     headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
        """Make HTTP request to WhatsApp API."""
        if headers is None:
            headers = {}
            
        headers.update({
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        })
        
        request_body = None
        if data:
            request_body = json.dumps(data).encode('utf-8')
            
        req = Request(url, data=request_body, headers=headers, method=method)
        
        self.logger.debug(f"Making {method} request to {url}")
        self.logger.debug(f"Request headers: {headers}")
        if data:
            self.logger.debug(f"Request body: {data}")
            
        try:
            with urlopen(req) as response:
                response_data = response.read().decode('utf-8')
                result = json.loads(response_data) if response_data else {}
                
                self.logger.debug(f"Response status: {response.status}")
                self.logger.debug(f"Response data: {result}")
                
                return result
                
        except HTTPError as e:
            error_body = e.read().decode('utf-8') if e.fp else ""
            self.logger.error(f"HTTP error {e.code}: {error_body}")
            raise
        except URLError as e:
            self.logger.error(f"URL error: {e.reason}")
            raise
        except json.JSONDecodeError as e:
            self.logger.error(f"JSON decode error: {e}")
            raise
            
    async def answer_call(self, phone_number_id: str, call_id: str, sdp_answer: str) -> Dict[str, Any]:
        """
        Answer an incoming WhatsApp voice call with SDP answer.
        
        Args:
            phone_number_id: WhatsApp phone number ID
            call_id: Unique call identifier
            sdp_answer: SDP answer generated by WebRTC adapter
            
        Returns:
            API response data
        """
        url = config.CALL_ANSWER_URL.format(phone_number_id=phone_number_id)
        
        payload = {
            'call_id': call_id,
            'action': 'answer',
            'sdp': sdp_answer
        }
        
        self.logger.info(f"Answering call {call_id} for phone number {phone_number_id}")
        
        # Make async request (using asyncio.to_thread for urllib)
        try:
            result = await asyncio.to_thread(
                self._make_request, 'POST', url, payload
            )
            
            self.logger.info(f"Successfully answered call {call_id}")
            return result
            
        except Exception as e:
            self.logger.error(f"Failed to answer call {call_id}: {e}")
            raise
            
    async def reject_call(self, phone_number_id: str, call_id: str, reason: str = "busy") -> Dict[str, Any]:
        """
        Reject an incoming WhatsApp voice call.
        
        Args:
            phone_number_id: WhatsApp phone number ID
            call_id: Unique call identifier  
            reason: Rejection reason (busy, declined, etc.)
            
        Returns:
            API response data
        """
        url = config.CALL_ANSWER_URL.format(phone_number_id=phone_number_id)
        
        payload = {
            'call_id': call_id,
            'action': 'reject',
            'reason': reason
        }
        
        self.logger.info(f"Rejecting call {call_id} with reason: {reason}")
        
        try:
            result = await asyncio.to_thread(
                self._make_request, 'POST', url, payload
            )
            
            self.logger.info(f"Successfully rejected call {call_id}")
            return result
            
        except Exception as e:
            self.logger.error(f"Failed to reject call {call_id}: {e}")
            raise
            
    async def get_call_status(self, phone_number_id: str, call_id: str) -> Dict[str, Any]:
        """
        Get the current status of a WhatsApp voice call.
        
        Args:
            phone_number_id: WhatsApp phone number ID
            call_id: Unique call identifier
            
        Returns:
            Call status data
        """
        url = f"{self.base_url}/{phone_number_id}/calls/{call_id}"
        
        self.logger.debug(f"Getting status for call {call_id}")
        
        try:
            result = await asyncio.to_thread(
                self._make_request, 'GET', url
            )
            
            self.logger.debug(f"Call {call_id} status: {result}")
            return result
            
        except Exception as e:
            self.logger.error(f"Failed to get call status for {call_id}: {e}")
            raise


# Global client instance
whatsapp_client = WhatsAppClient()